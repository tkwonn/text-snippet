name: deploy to EC2

on:
  workflow_run:
    workflows: ["CI"]
    types:
        - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
      EC2_INSTANCE_ID: "i-0787bc1994b8b31e1"
      AWS_REGION: "us-west-2"
      GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Application ðŸš€
        run: |
          COMMANDS_JSON=$(cat << EOF
          {
            "commands": [
              "set -e",
              "sudo chown -R ubuntu:ubuntu /home/ubuntu/web/text-snippet",
              "sudo -u ubuntu bash -c \"cd /home/ubuntu/web/text-snippet && \
                git pull origin $GITHUB_BRANCH && \
                composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist && \
                sudo systemctl restart php8.3-fpm && \
                sudo systemctl reload nginx\""
            ]
          }
          EOF
          )
          
          # Send SSM Command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 3600 \
            --query "Command.CommandId" \
            --output text)
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for the command to finish
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" || {
              echo "SSM command failed or timed out."
              aws ssm get-command-invocation \
                --instance-id "${{ env.EC2_INSTANCE_ID }}" \
                --command-id "$COMMAND_ID" \
                --region "${{ env.AWS_REGION }}" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            }

          # Get the command output
          OUTPUT=$(aws ssm get-command-invocation \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --region "${{ env.AWS_REGION }}" \
            --query "StandardOutputContent" \
            --output text)

          echo "$OUTPUT"